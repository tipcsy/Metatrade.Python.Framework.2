[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "metatrader-python-framework"
version = "2.0.0"
description = "Advanced Python framework for MetaTrader 5 connections and algorithmic trading"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "MetaTrader Framework Team"},
]
maintainers = [
    {name = "MetaTrader Framework Team"},
]
keywords = [
    "metatrader",
    "mt5",
    "trading",
    "algorithmic",
    "technical-analysis",
    "indicators",
    "patterns",
    "forex",
    "stocks",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Financial and Insurance Industry",
    "License :: OSI Approved :: MIT License",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: POSIX :: Linux",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Office/Business :: Financial :: Investment",
    "Topic :: Scientific/Engineering :: Information Analysis",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.9"
dependencies = [
    "MetaTrader5>=5.0.45",
    "pydantic>=2.0.0",
    "pydantic-settings>=2.0.0",
    "PyYAML>=6.0",
    "numpy>=1.21.0",
    "pandas>=1.3.0",
    "python-dotenv>=1.0.0",
    "structlog>=23.1.0",
    "rich>=13.0.0",
    "typer>=0.9.0",
    "sqlalchemy>=2.0.0",
    "aiosqlite>=0.19.0",
    "asyncio-mqtt>=0.13.0",
    "websockets>=11.0.0",
    "schedule>=1.2.0",
]

[project.optional-dependencies]
development = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
    "pre-commit>=3.3.0",
    "bandit>=1.7.5",
    "safety>=2.3.0",
]
testing = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "factory-boy>=3.3.0",
    "freezegun>=1.2.0",
    "responses>=0.23.0",
]
production = [
    "gunicorn>=21.0.0",
    "uvicorn>=0.23.0",
    "prometheus-client>=0.17.0",
]
gui = [
    "PyQt6>=6.5.0",
    "matplotlib>=3.7.0",
    "plotly>=5.15.0",
    "dash>=2.11.0",
]
documentation = [
    "sphinx>=7.1.0",
    "sphinx-rtd-theme>=1.3.0",
    "myst-parser>=2.0.0",
    "sphinx-autodoc-typehints>=1.24.0",
]

[project.urls]
Homepage = "https://github.com/tipcsy/metatrader-python-framework"
Documentation = "https://metatrader-python-framework.readthedocs.io/"
Repository = "https://github.com/tipcsy/metatrader-python-framework.git"
Issues = "https://github.com/tipcsy/metatrader-python-framework/issues"
Changelog = "https://github.com/tipcsy/metatrader-python-framework/blob/main/CHANGELOG.md"

[project.scripts]
mt5-framework = "src.core.cli:main"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
"*" = ["*.yaml", "*.yml", "*.json", "*.toml"]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["src"]
known_third_party = ["MetaTrader5", "pydantic", "numpy", "pandas"]

# MyPy configuration
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "MetaTrader5.*",
    "matplotlib.*",
    "plotly.*",
    "dash.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
    "--cov-fail-under=80",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "unit: marks tests as unit tests (deselect with '-m \"not unit\"')",
    "integration: marks tests as integration tests (deselect with '-m \"not integration\"')",
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "mt5: marks tests that require MetaTrader 5 connection",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__init__.py",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Bandit security linter configuration
[tool.bandit]
exclude_dirs = ["tests", "migrations"]
skips = ["B101", "B601"]